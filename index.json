[{"content":"I want to write about my code projects. Where can I do that?\nMy Projects/Code ","permalink":"https://tealblu.github.io/pages/2024-01-21/","summary":"I want to write about my code projects. Where can I do that?\nMy Projects/Code ","title":"2024-01-21"},{"content":"Description: This is the collection of my code projects that I\u0026rsquo;ve done over the years.\nProject List: PDP-11 Instruction Set Simulator: My Projects/Code/pdp11-sim\nDriveTime: My Projects/Code/DriveTime\nImage Classification AI: My Projects/Code/Image Classification AI\nLow-Cost Universal Camera Array: My Projects/Code/LUCA\n","permalink":"https://tealblu.github.io/pages/my-projects/code/","summary":"Description: This is the collection of my code projects that I\u0026rsquo;ve done over the years.\nProject List: PDP-11 Instruction Set Simulator: My Projects/Code/pdp11-sim\nDriveTime: My Projects/Code/DriveTime\nImage Classification AI: My Projects/Code/Image Classification AI\nLow-Cost Universal Camera Array: My Projects/Code/LUCA","title":"My Projects/Code"},{"content":"DriveTime is a web application intended to incentivize truck drivers to drive more safely. It is built with C#, CSHMTL, Entity Framework Core, Ebay API, iTunes API, AWS Elastic Beanstalk, AWS EC2, and AWS RDS.\n","permalink":"https://tealblu.github.io/pages/my-projects/code/drivetime/","summary":"DriveTime is a web application intended to incentivize truck drivers to drive more safely. It is built with C#, CSHMTL, Entity Framework Core, Ebay API, iTunes API, AWS Elastic Beanstalk, AWS EC2, and AWS RDS.","title":"My Projects/Code/DriveTime"},{"content":"I created an AI for automated classification of production line quality control images on Stratus Vision AOI systems. I identified key areas of application and improvement, and performed ongoing fine-tuning and maintenance to the model based on various metrics.\n","permalink":"https://tealblu.github.io/pages/my-projects/code/image-classification-ai/","summary":"I created an AI for automated classification of production line quality control images on Stratus Vision AOI systems. I identified key areas of application and improvement, and performed ongoing fine-tuning and maintenance to the model based on various metrics.","title":"My Projects/Code/Image Classification AI"},{"content":"Helped develop and maintain Bosch’s in-house computer vision system. Gradually took ownership of the project and became the sole developer and maintainer of the project.\nThe system is built from a raspberry pi, 8 NVidia Jetson Nano boards, and 16 high-resolution cameras. The cameras are attached to a 3-axis mount controlled by 3 servo motors. LED lighting strips were added later to the inside of the machine in order to add the ability to customize lighting.\n","permalink":"https://tealblu.github.io/pages/my-projects/code/luca/","summary":"Helped develop and maintain Bosch’s in-house computer vision system. Gradually took ownership of the project and became the sole developer and maintainer of the project.\nThe system is built from a raspberry pi, 8 NVidia Jetson Nano boards, and 16 high-resolution cameras. The cameras are attached to a 3-axis mount controlled by 3 servo motors. LED lighting strips were added later to the inside of the machine in order to add the ability to customize lighting.","title":"My Projects/Code/LUCA"},{"content":"Description: This is a C program that accurately simulates the PDP-11 computer\u0026rsquo;s assembly language, complete with virtual memory, CPU registers, and a caching system. Input and output are performed through the command line or through files. Instruction Set: The PDP-11 instruction set contains 12 basic operations to be performed on memory addresses. Operands are represented by 16-bit words, with the leftmost bits containing the opcode and the rightmost bits containing source, destination, and register addresses. In addition, many other operands are supported, allowing for a wide variety of operations to be performed.\nArchitecture: The PDP-11 architecture is a 16-bit instruction set architecture developed by Digital Equipment Corporation for use with PDP-11 computers. It was widely used in the 1970s, but grew less popular in the 1980s and afterwards.\nMemory Memory is represented by 16-bit words in little-endian format. The smallest addressable unit of memory is 8 bits. Registers R0-R7 can each store one word, which points to a location in the computer\u0026rsquo;s 64KB of memory. Low memory addresses are reserved for two-word vectors that serve as places to store the program counter and processor status.\nCPU Registers The PDP-11 contains eight general-purpose 16-bit registers (R0-R7). Register R7 stores the program counter. Other registers have common but not universal use cases.\nAddressing Modes The PDP-11 computer uses eight \u0026ldquo;addressing modes\u0026rdquo;. Each addressing mode alters the operation of the registers as shown in the following chart.\nCode Name Example Description 0n Register Rn The operand is in Rn. 1n Register deferred (Rn) Rn contains the address of the operand. 2n Autoincrement (Rn)+ Rn contains the address of the operand, then increment Rn. 3n Autoincrement deferred @(Rn)+ Rn contains the address of the address of the operand, then increment Rn by 2. 4n Autodecrement -(Rn) Decrement Rn, then use the result as the address of the operand. 5n Autodecrement deferred @-(Rn) Decrement Rn by 2, then use the result as the address of the address of the operand. 6n Index X(Rn) Rn+X is the address of the operand. 7n Index deferred @X(Rn) Rn+X is the address of the address of the operand. The Program Counter has four addressing modes, and the Stack has 6 addressing modes, both of which alter the operation of the system in their own way.\nCode Breakdown: Memory addresses are stored in the following structure:\nint mode stores the operating mode.\nint reg stores the register on which the operation is being performed.\nint addr stores addresses relevant to modes 1-7.\nint value stores a relevant value.\n/* struct to help organize source and destination operand handling */ typedef struct ap { int mode; int reg; int addr; /* used only for modes 1-7 */ int value; } addr_phrase_t; The following global variables are defined:\nuint16_t memory[MEMSIZE] represents the simulated global memory, segregated into 16-bit chunks. MEMSIZE is a predefined variable that determines the amount of memory available to the system.\nuint16_t reg[8] represents the 8 CPU registers, each capable of storing one 16-bit word.\nbool n, z, v, c are single-bit condition codes used to indicate the status of the system.\nAll other global variables are used for statistics purposes and do not affect the operation of the system.\n// Global variables uint16_t memory[MEMSIZE]; // 16-bit memory uint16_t reg[8] = {0}; // R0-R7 bool n, z, v, c; // Condition codes addr_phrase_t src, dst; // Source and destination address phrases bool running; // Flag to indicate if the program is running bool trace = false; bool verbose = false; int memory_reads = 0; int memory_writes = 0; int inst_fetches = 0; int inst_execs = 0; int branch_taken = 0; int branch_execs = 0; The following functions are defined:\noperate() takes a 16-bit instruction as its input, interprets it, and performs the corresponding action.\nget_operand(), update_operand(), and put_operand() all modify the operand.\npstats() and pregs() are defined for development purposes - they print statistics and the values of the registers, respectively.\nThe full code for each of these functions can be seen in the project\u0026rsquo;s GitHub Repository\n// Function prototypes void operate(uint16_t instruction); void get_operand(addr_phrase_t *phrase); void update_operand(addr_phrase_t *phrase); void put_operand(addr_phrase_t *phrase); void add(uint16_t operand); void asl(uint16_t operand); void asr(uint16_t operand); void beq(uint16_t operand); void bne(uint16_t operand); void br(uint16_t operand); void cmp(uint16_t operand); void halt(uint16_t operand); void mov(uint16_t operand); void sob(uint16_t operand); void sub(uint16_t operand); void pstats(); void pregs(); Links GitHub Repository\nWhat the heck is a PDP-11?\nPDP-11 Instruction Set\n","permalink":"https://tealblu.github.io/pages/my-projects/code/pdp11-sim/","summary":"Description: This is a C program that accurately simulates the PDP-11 computer\u0026rsquo;s assembly language, complete with virtual memory, CPU registers, and a caching system. Input and output are performed through the command line or through files. Instruction Set: The PDP-11 instruction set contains 12 basic operations to be performed on memory addresses. Operands are represented by 16-bit words, with the leftmost bits containing the opcode and the rightmost bits containing source, destination, and register addresses.","title":"My Projects/Code/pdp11-sim"},{"content":"This is my first page! I intend to use journals (pages titled with a date) as working spaces. All actual content should be on its own page.\nThings to note when working on this site:\nLogseq-schrodinger uses YAML for the Hugo front-matter. It will convert Logseq page-properties to Hugo front matter.\nLogseq keywords are lowercase converted to Hugo keywords, and category in Logseq is translated to categories for use with Hugo. Logseq links (like_this) are stripped of and .\nAll other keywords are just converted to Hugo keywords.\nFor now you must add date with the posts date in the form of \u0026ldquo;2012-04-06\u0026rdquo; to your Logseq page-properties.\nExample - date:: 2012-04-06\nI need a part of this graph that I can use to put structural data.\nGraph Structure I would also like a place to remind myself how to deploy.\nDeployment Templates, too.\nTemplates More pages:\nMy Projects ","permalink":"https://tealblu.github.io/pages/2024-01-20/","summary":"This is my first page! I intend to use journals (pages titled with a date) as working spaces. All actual content should be on its own page.\nThings to note when working on this site:\nLogseq-schrodinger uses YAML for the Hugo front-matter. It will convert Logseq page-properties to Hugo front matter.\nLogseq keywords are lowercase converted to Hugo keywords, and category in Logseq is translated to categories for use with Hugo.","title":"2024-01-20"},{"content":"How to deploy to this site: From Logseq, use schrodinger to export all public pages.\nUnzip the new archive and move the new \u0026lsquo;pages\u0026rsquo; folder into tealblu.github.io/content.\nInside tealblu.github.io, open a terminal and run hugo\nCreate a new commit and push to the remote graph.\nWait a few minutes for Github Actions to run.\nDone!\n","permalink":"https://tealblu.github.io/pages/deployment/","summary":"How to deploy to this site: From Logseq, use schrodinger to export all public pages.\nUnzip the new archive and move the new \u0026lsquo;pages\u0026rsquo; folder into tealblu.github.io/content.\nInside tealblu.github.io, open a terminal and run hugo\nCreate a new commit and push to the remote graph.\nWait a few minutes for Github Actions to run.\nDone!","title":"Deployment"},{"content":"What am I doing? I am figuring out how to structure this graph.\nI am defining a structure now so that it stays organized as it grows.\nJust a few simple rules can turn chaos into order. Rules should be short and simple.\nRules should be easy to understand.\nWhy am I doing it? As stated above, so that it stays organized as it grows.\nThis graph is my public \u0026ldquo;knowledge garden\u0026rdquo;, so I would like it to be as accessible to others as possible.\nWhat are my rules? Any block larger than one paragraph (subjective) should be its own page.\nAny page longer than two full screens should be split up.\nFull sentences should be used when possible.\nNo orphan pages should ever be pushed to production.\nAll root pages should have a category.\nNo child pages should have a category.\n","permalink":"https://tealblu.github.io/pages/graph-structure/","summary":"What am I doing? I am figuring out how to structure this graph.\nI am defining a structure now so that it stays organized as it grows.\nJust a few simple rules can turn chaos into order. Rules should be short and simple.\nRules should be easy to understand.\nWhy am I doing it? As stated above, so that it stays organized as it grows.\nThis graph is my public \u0026ldquo;knowledge garden\u0026rdquo;, so I would like it to be as accessible to others as possible.","title":"Graph Structure"},{"content":"What kind of projects do I do? I\u0026rsquo;m interested in a lot of different stuff! This collection will hopefully become an archive of my various projects, both for my personal reference and to document for future employment purposes. The types of projects here will include:\nCode, programming, and related projects -\u0026gt; My Projects/Code\nDIY stuff\nMusic\nAnd potentially more\u0026hellip;\n","permalink":"https://tealblu.github.io/pages/my-projects/","summary":"What kind of projects do I do? I\u0026rsquo;m interested in a lot of different stuff! This collection will hopefully become an archive of my various projects, both for my personal reference and to document for future employment purposes. The types of projects here will include:\nCode, programming, and related projects -\u0026gt; My Projects/Code\nDIY stuff\nMusic\nAnd potentially more\u0026hellip;","title":"My Projects"},{"content":"metadata template:: metadata template-including-parent:: false\ndate:: YYYY-MM-DD category:: keywords:: public:: true ","permalink":"https://tealblu.github.io/pages/templates/","summary":"metadata template:: metadata template-including-parent:: false\ndate:: YYYY-MM-DD category:: keywords:: public:: true ","title":"Templates"}]