[{"content":"Hey there! I\u0026rsquo;m Indigo - a computer science grad from Clemson with experience in software development, computer vision, AI, and IT support. I\u0026rsquo;m a quick learner who enjoys taking on new challenges and responsibilities - in my current role at Bosch, I took responsibility for all computer vision systems on the production line within a month of starting my job. Since then, I\u0026rsquo;ve made continuous improvements to our vision and software systems, leading to a savings of over $500k annually. Outside of work, I\u0026rsquo;ve taken on leadership roles in academic, professional, social, and political organizations throughout my life. In my free time, I love listening to and learning to play new music, spending time with my friends, and working on my car and bicycle. Let\u0026rsquo;s connect!\nWork experience Robert Bosch Inc. – Engineer (Software/AOI) Anderson, SC, USA\nMarch 2023 - Present\nTook sole responsibility for all computer vision systems and all related infrastructure in the LTCC production line, utilizing tools from Stratus Vision, Teledyne, ATMO, and our locally-designed LUCA computer vision platform. Performed maintenance and spearheaded ongoing improvement of computer vision systems through projects such as AI implementation, statistical analysis, database management, and more. Provided the department with local support for developing and maintaining software projects involving C++, C#, Python, Excel, R, JavaScript, and MS SQL Server. Led continuous improvement initiatives reducing IDC by over $300k annually. Clemson Computing and Information Technology – IT Technician Clemson, SC, USA\nJanuary 2021 - December 2022\nProvided real-time, in-person A/V system and networking support to university employees and students. Performed hardware and software installs, upgrades, and maintenance across campus. Chick-fil-A – Team Member Cherrydale, SC, USA\nMay 2017 - August 2020\nGranted a great degree of autonomy and trusted to work independently managing a one-of-a-kind Chick-fil-A location. Performed management duties including inventory tracking, forecasting, and order placement, mileage tracking, sales reports, and more. Skills Languages/Frameworks: C, C++, C# (.NET, .NET Core, MVC, EFC), Java, PHP (LAMP), JavaScript, Google Apps Script, HTML, CSS, SQL (MySql, MSSQL), Python (OpenCV, Matplotlib, Eigen), MATLAB, PowerShell, Prolog, OCaml Databases: MySQL, Microsoft SQL Server Tooling: Git, GitLab, Azure DevOps, Postman, Visual Studio, IntelliJ IDEA UI Frameworks: Material UI, TkInter, niceGUI, Qt Other: Scrum, Agile methodologies, Amazon Web Services (EC2, RDS, Elastic Beanstalk), Stratus Vision SPIN/SPINDLE Notable Projects Image Classification AI Spearheaded AI project selected for inclusion in executive presentations to German and US Departments of Energy and Bosch Global President, spotlighting over $50K in expected annual savings. Low-Cost Universal Camera Array (LUCA) Helped develop and maintain Bosch’s in-house computer vision system. Gradually took ownership of the project and became the sole developer and maintainer of the project. PDP-11 Instruction Set Simulator Designed a C program that accurately simulates the PDP-11 computer’s assembly language, complete with virtual memory, CPU registers, and a caching system. Input and output are performed via the command line or through files. DriveTime Led a team of five in designing a web application intended to incentivize truck drivers to drive more safely. Utilized C#, CSHMTL, Entity Framework Core, Ebay API, iTunes API, AWS Elastic Beanstalk, AWS EC2, and AWS RDS. Other Leadership Roles President of the ΗΣΑ National Homeschool Honor Society, ΦΒ chapter (2017-18) Secretary at Clemson Boards (2020-2022) Leader at Chick-fil-A Downtown Greenville (2018-2020) Additional Information Completed the Junior Leadership Greenville and Junior Leadership Greer programs. Accumulated hundreds of community service hours through the Honor Society and other opportunities. Completed extracurricular classes in Electric Circuits, Logic \u0026amp; Computing Devices, Systems Programming, MATLAB, and Engineering Concepts. ","permalink":"https://www.indi.bio/about/","summary":"about","title":"about indigo"},{"content":"06:14 Write more about Cultivating Knowledge Through Digital Gardenss\nWhat is a knowledge garden?\nZettelkassen\n08:10 I also want to add a page with my contact info and socials. Kind of like a linktree but on my domain and hosted on this site.\n10:38 need to edit Hugo theme so that todo items render correctly\n","permalink":"https://www.indi.bio/pages/2024-06-24/","summary":"06:14 Write more about Cultivating Knowledge Through Digital Gardenss\nWhat is a knowledge garden?\nZettelkassen\n08:10 I also want to add a page with my contact info and socials. Kind of like a linktree but on my domain and hosted on this site.\n10:38 need to edit Hugo theme so that todo items render correctly","title":"2024-06-24"},{"content":"\rIf a note is not published, does it really exist? - Erwin Schrödinger*\rspores The phrase \u0026ldquo;digital garden\u0026rdquo; is more of an analogy than a descriptive literal. Just as a mushroom garden flourishes from tiny spores into a complex network, a digital garden nurtures small ideas into a rich, interconnected ecosystem of knowledge. Digital gardens are living entities, constantly evolving as they harbor works in progress, nascent ideas, and fleeting thoughts that, over time, grow and intertwine into a robust network of knowledge. Each note in a digital garden starts small. Over time, as the user researches, learns, and grows, they can apply that learning to the note. Through cycles of addition and refinement, these small notes grow into a network of interwoven thoughts and ideas, providing structure and meaning to an otherwise scattered and messy collection of ideas.\ngrafting One of the most significant challenges of maintaining a digital garden is integrating it with one\u0026rsquo;s life in a way that is both seamless and practical. Many attempts have been made throughout history to bridge this gap - consider the commonplace book, a method documented as early as 40 BC by Andronicus of Rhodes in Topics, his compilation of works by Aristotle on the subject of logic. To this day, balancing convenience with functionality remains a struggle. One of my favorite ways of integrating my knowledge base into my life is interstitial journaling. In essence, the idea is to write one\u0026rsquo;s thoughts whenever one has them, along with a timestamp. Then, later, when one has the time and energy, they can expound more on their earlier thoughts. Using this method helps me keep everything organized (one page for every day, organized chronologically) while still being easy to use and navigate.\nmycelium Thus far, if one has been following along with the methods described in this page, one will end up with a messy pile of unrelated notes. Without structure, a collection of notes can resemble a chaotic tangle. Structure can be imposed upon the notes via categorization, but that is work-intensive and can eventually grow to beyond what one can reasonably manage (one could call this the brute force method). A more elegant way of generating structure in one\u0026rsquo;s knowledge is to connect ideas together. By finding the common themes in one\u0026rsquo;s notes, their collection can morph from a disorganized mess into an elegant, navigable system. One method of keeping track of linkages between ideas and topics is Zettelkasten, a personal knowledge management system pioneered by Conrad Gessner in the 1500s. By creating unique identifiers (think URIs) for each note, they can be succinctly referenced by other notes, indexed, and organized with ease. Linking one\u0026rsquo;s notes in such a way enables one to see the greater structure to their knowledge - that is, by seeing the common threads that connect our thoughts, we can begin to understand ourselves and our knowledge even better.\nsuperposition Think back to the quote at the beginning of this article and consider Schrödinger\u0026rsquo;s cat - an analogy for the state of unshared knowledge. If knowledge remains unseen, does it truly contribute to the world? Sharing through digital gardens not only validates our thoughts but also invites others to expand and evolve them, fostering a collective growth of understanding. I decided to share my knowledge with the world through digital garden, so that others can hopefully learn to grow their own.\nread more: What is a digital garden? Danielle Messler\nErwin Schrodinger\n*This is not a real quote. It\u0026rsquo;s a joke about superposition and note taking.\n","permalink":"https://www.indi.bio/pages/cultivating-knowledge-through-digital-gardens/","summary":"If a note is not published, does it really exist? - Erwin Schrödinger*\rspores The phrase \u0026ldquo;digital garden\u0026rdquo; is more of an analogy than a descriptive literal. Just as a mushroom garden flourishes from tiny spores into a complex network, a digital garden nurtures small ideas into a rich, interconnected ecosystem of knowledge. Digital gardens are living entities, constantly evolving as they harbor works in progress, nascent ideas, and fleeting thoughts that, over time, grow and intertwine into a robust network of knowledge.","title":"Cultivating Knowledge Through Digital Gardens"},{"content":"I want to write about my code projects. Where can I do that?\nCode Projects #Diaries 2024-01-21 20:55: The internet is such a cool thing. I spent today working on my website and home automation stuff, and now I\u0026rsquo;m hanging out with my best friends on Discord. We live thousands of miles away, yet we can chat as if we were sitting next to each other. Each day I wake up grateful that I was born in the 21st century.\n","permalink":"https://www.indi.bio/pages/2024-01-21/","summary":"I want to write about my code projects. Where can I do that?\nCode Projects #Diaries 2024-01-21 20:55: The internet is such a cool thing. I spent today working on my website and home automation stuff, and now I\u0026rsquo;m hanging out with my best friends on Discord. We live thousands of miles away, yet we can chat as if we were sitting next to each other. Each day I wake up grateful that I was born in the 21st century.","title":"2024-01-21"},{"content":"09:12 I need to refactor the code for this website and improve the content. There’s not really anything worth reading on it at the moment and I want to change that. I have lots of ideas, but every time I sit down to write at my computer I don’t feel motivated to make content. How can I fix that?\nDONE Fix Templates\nDONE Check if \u0026lt;% today %\u0026gt; macro works for hugo ssg DONE Redo 📄 README.md DONE Homepage changes\nChange name from archive to something else\nRewrite description block\nAdd images\nSimplify navigation\nDONE Get a domain name\nindigo.wiki is expensive\ni got indi.bio!\nTODO Navigation changes\nChange title of ‘archive’ in search bar to resolve confusion\nCreate tagging system? Seems a bit redundant with categories as well\nCould change categories to be a bit more obfuscated e.g.:\ncontent\njournal\nmeta\nother stuff??\nThen create tags like\ncode\nblog\netc\n09:32 Re-export via schrodinger to DONE Check if \u0026lt;% today %\u0026gt; macro works for hugo ssg as well as check if the block link inside this block works\n","permalink":"https://www.indi.bio/pages/2024-06-23/","summary":"09:12 I need to refactor the code for this website and improve the content. There’s not really anything worth reading on it at the moment and I want to change that. I have lots of ideas, but every time I sit down to write at my computer I don’t feel motivated to make content. How can I fix that?\nDONE Fix Templates\nDONE Check if \u0026lt;% today %\u0026gt; macro works for hugo ssg DONE Redo 📄 README.","title":"2024-06-23"},{"content":"I\u0026rsquo;ve done a few projects recently, and I want to add them to the site\nTODO Write about image recognition project\nTODO Write about inspection modularization\nLet\u0026rsquo;s pause and zoom out for a sec - I don\u0026rsquo;t like the structure of this graph. It doesn\u0026rsquo;t work well with the way I\u0026rsquo;ve structured my Hugo templates.\nMove to Graph Structure TODO Write script to convert Logseq frontmatter to YAML for Cosma parsing\nTODO Research using that logseq graph plugin to render my graph\nGraph Rendering ","permalink":"https://www.indi.bio/pages/2024-02-18/","summary":"I\u0026rsquo;ve done a few projects recently, and I want to add them to the site\nTODO Write about image recognition project\nTODO Write about inspection modularization\nLet\u0026rsquo;s pause and zoom out for a sec - I don\u0026rsquo;t like the structure of this graph. It doesn\u0026rsquo;t work well with the way I\u0026rsquo;ve structured my Hugo templates.\nMove to Graph Structure TODO Write script to convert Logseq frontmatter to YAML for Cosma parsing","title":"2024-02-18"},{"content":"Project goals: Create an interactive \u0026ldquo;graph view\u0026rdquo; of this website to display on its homepage.\nMake it compatible with github pages and hugo\u0026rsquo;s static site specifications.\nResearch: Plotly with Hugo\nLogseq codebase overview\nArticle on logseq codebase structure\nLogseq built-in renderer\nCosma | Installing Cosma (arthurperret.fr)\nLogseq Graph Analysis plugin\nDevelopment themes/PaperModlayouts/partials/home_info.html is the template for my home page\nI need to figure out how to render a graph in this page\nJavaScript parser returns map containing all links\nMap contents:\n+ JavaScript renderer renders everything ","permalink":"https://www.indi.bio/pages/graph-rendering/","summary":"Project goals: Create an interactive \u0026ldquo;graph view\u0026rdquo; of this website to display on its homepage.\nMake it compatible with github pages and hugo\u0026rsquo;s static site specifications.\nResearch: Plotly with Hugo\nLogseq codebase overview\nArticle on logseq codebase structure\nLogseq built-in renderer\nCosma | Installing Cosma (arthurperret.fr)\nLogseq Graph Analysis plugin\nDevelopment themes/PaperModlayouts/partials/home_info.html is the template for my home page\nI need to figure out how to render a graph in this page","title":"Graph Rendering"},{"content":"Description: This is the collection of my code projects that I\u0026rsquo;ve done over the years.\nProject List: PDP-11 Instruction Set Simulator: PDP-11 Instruction Set Simulator\nDriveTime: DriveTime\nImage Classification AI: Image Classification AI\nLow-Cost Universal Camera Array: LUCA\nArchive website (the website you\u0026rsquo;re on)\nHomepage graph view: Graph Rendering ","permalink":"https://www.indi.bio/pages/code-projects/","summary":"Description: This is the collection of my code projects that I\u0026rsquo;ve done over the years.\nProject List: PDP-11 Instruction Set Simulator: PDP-11 Instruction Set Simulator\nDriveTime: DriveTime\nImage Classification AI: Image Classification AI\nLow-Cost Universal Camera Array: LUCA\nArchive website (the website you\u0026rsquo;re on)\nHomepage graph view: Graph Rendering ","title":"Code Projects"},{"content":"Flesh out this page later\n#Diaries is the tag that I will use to denote a diary entry.\n","permalink":"https://www.indi.bio/pages/diaries/","summary":"Flesh out this page later\n#Diaries is the tag that I will use to denote a diary entry.","title":"Diaries"},{"content":"DriveTime is a web application intended to incentivize truck drivers to drive more safely. It is built with C#, CSHMTL, Entity Framework Core, Ebay API, iTunes API, AWS Elastic Beanstalk, AWS EC2, and AWS RDS.\n","permalink":"https://www.indi.bio/pages/drivetime/","summary":"DriveTime is a web application intended to incentivize truck drivers to drive more safely. It is built with C#, CSHMTL, Entity Framework Core, Ebay API, iTunes API, AWS Elastic Beanstalk, AWS EC2, and AWS RDS.","title":"DriveTime"},{"content":"I created an AI for automated classification of production line quality control images on Stratus Vision AOI systems. I identified key areas of application and improvement, and performed ongoing fine-tuning and maintenance to the model based on various metrics.\n","permalink":"https://www.indi.bio/pages/image-classification-ai/","summary":"I created an AI for automated classification of production line quality control images on Stratus Vision AOI systems. I identified key areas of application and improvement, and performed ongoing fine-tuning and maintenance to the model based on various metrics.","title":"Image Classification AI"},{"content":"Helped develop and maintain Bosch’s in-house computer vision system. Gradually took ownership of the project and became the sole developer and maintainer of the project.\nThe system is built from a raspberry pi, 8 NVidia Jetson Nano boards, and 16 high-resolution cameras. The cameras are attached to a 3-axis mount controlled by 3 servo motors. LED lighting strips were added later to the inside of the machine in order to add the ability to customize lighting.\n","permalink":"https://www.indi.bio/pages/luca/","summary":"Helped develop and maintain Bosch’s in-house computer vision system. Gradually took ownership of the project and became the sole developer and maintainer of the project.\nThe system is built from a raspberry pi, 8 NVidia Jetson Nano boards, and 16 high-resolution cameras. The cameras are attached to a 3-axis mount controlled by 3 servo motors. LED lighting strips were added later to the inside of the machine in order to add the ability to customize lighting.","title":"LUCA"},{"content":"Description: This is a C program that accurately simulates the PDP-11 computer\u0026rsquo;s assembly language, complete with virtual memory, CPU registers, and a caching system. Input and output are performed through the command line or through files. Instruction Set: The PDP-11 instruction set contains 12 basic operations to be performed on memory addresses. Operands are represented by 16-bit words, with the leftmost bits containing the opcode and the rightmost bits containing source, destination, and register addresses. In addition, many other operands are supported, allowing for a wide variety of operations to be performed.\nArchitecture: The PDP-11 architecture is a 16-bit instruction set architecture developed by Digital Equipment Corporation for use with PDP-11 computers. It was widely used in the 1970s, but grew less popular in the 1980s and afterwards.\nMemory Memory is represented by 16-bit words in little-endian format. The smallest addressable unit of memory is 8 bits. Registers R0-R7 can each store one word, which points to a location in the computer\u0026rsquo;s 64KB of memory. Low memory addresses are reserved for two-word vectors that serve as places to store the program counter and processor status.\nCPU Registers The PDP-11 contains eight general-purpose 16-bit registers (R0-R7). Register R7 stores the program counter. Other registers have common but not universal use cases.\nAddressing Modes The PDP-11 computer uses eight \u0026ldquo;addressing modes\u0026rdquo;. Each addressing mode alters the operation of the registers as shown in the following chart.\nCode Name Example Description 0n Register Rn The operand is in Rn. 1n Register deferred (Rn) Rn contains the address of the operand. 2n Autoincrement (Rn)+ Rn contains the address of the operand, then increment Rn. 3n Autoincrement deferred @(Rn)+ Rn contains the address of the address of the operand, then increment Rn by 2. 4n Autodecrement -(Rn) Decrement Rn, then use the result as the address of the operand. 5n Autodecrement deferred @-(Rn) Decrement Rn by 2, then use the result as the address of the address of the operand. 6n Index X(Rn) Rn+X is the address of the operand. 7n Index deferred @X(Rn) Rn+X is the address of the address of the operand. The Program Counter has four addressing modes, and the Stack has 6 addressing modes, both of which alter the operation of the system in their own way.\nCode Breakdown: Memory addresses are stored in the following structure:\nint mode stores the operating mode.\nint reg stores the register on which the operation is being performed.\nint addr stores addresses relevant to modes 1-7.\nint value stores a relevant value.\n/* struct to help organize source and destination operand handling */ typedef struct ap { int mode; int reg; int addr; /* used only for modes 1-7 */ int value; } addr_phrase_t; The following global variables are defined:\nuint16_t memory[MEMSIZE] represents the simulated global memory, segregated into 16-bit chunks. MEMSIZE is a predefined variable that determines the amount of memory available to the system.\nuint16_t reg[8] represents the 8 CPU registers, each capable of storing one 16-bit word.\nbool n, z, v, c are single-bit condition codes used to indicate the status of the system.\nAll other global variables are used for statistics purposes and do not affect the operation of the system.\n// Global variables uint16_t memory[MEMSIZE]; // 16-bit memory uint16_t reg[8] = {0}; // R0-R7 bool n, z, v, c; // Condition codes addr_phrase_t src, dst; // Source and destination address phrases bool running; // Flag to indicate if the program is running bool trace = false; bool verbose = false; int memory_reads = 0; int memory_writes = 0; int inst_fetches = 0; int inst_execs = 0; int branch_taken = 0; int branch_execs = 0; The following functions are defined:\noperate() takes a 16-bit instruction as its input, interprets it, and performs the corresponding action.\nget_operand(), update_operand(), and put_operand() all modify the operand.\npstats() and pregs() are defined for development purposes - they print statistics and the values of the registers, respectively.\nThe full code for each of these functions can be seen in the project\u0026rsquo;s GitHub Repository\n// Function prototypes void operate(uint16_t instruction); void get_operand(addr_phrase_t *phrase); void update_operand(addr_phrase_t *phrase); void put_operand(addr_phrase_t *phrase); void add(uint16_t operand); void asl(uint16_t operand); void asr(uint16_t operand); void beq(uint16_t operand); void bne(uint16_t operand); void br(uint16_t operand); void cmp(uint16_t operand); void halt(uint16_t operand); void mov(uint16_t operand); void sob(uint16_t operand); void sub(uint16_t operand); void pstats(); void pregs(); Links GitHub Repository\nWhat the heck is a PDP-11?\nPDP-11 Instruction Set\n","permalink":"https://www.indi.bio/pages/pdp-11-instruction-set-simulator/","summary":"Description: This is a C program that accurately simulates the PDP-11 computer\u0026rsquo;s assembly language, complete with virtual memory, CPU registers, and a caching system. Input and output are performed through the command line or through files. Instruction Set: The PDP-11 instruction set contains 12 basic operations to be performed on memory addresses. Operands are represented by 16-bit words, with the leftmost bits containing the opcode and the rightmost bits containing source, destination, and register addresses.","title":"PDP-11 Instruction Set Simulator"},{"content":"This is my first page! I intend to use journals (pages titled with a date) as working spaces. All actual content should be on its own page.\nThings to note when working on this site:\nLogseq-schrodinger uses YAML for the Hugo front-matter. It will convert Logseq page-properties to Hugo front matter.\nLogseq keywords are lowercase converted to Hugo keywords, and category in Logseq is translated to categories for use with Hugo. Logseq links ([[like_this]]) are stripped of [[ and ]].\nAll other keywords are just converted to Hugo keywords.\nFor now you must add date with the posts date in the form of \u0026ldquo;2012-04-06\u0026rdquo; to your Logseq page-properties.\nExample - date:: 2012-04-06\nI need a part of this graph that I can use to put structural data.\nGraph Structure I would also like a place to remind myself how to deploy.\nDeployment Templates, too.\nTemplates More pages:\nProjects Homepage ","permalink":"https://www.indi.bio/pages/2024-01-20/","summary":"This is my first page! I intend to use journals (pages titled with a date) as working spaces. All actual content should be on its own page.\nThings to note when working on this site:\nLogseq-schrodinger uses YAML for the Hugo front-matter. It will convert Logseq page-properties to Hugo front matter.\nLogseq keywords are lowercase converted to Hugo keywords, and category in Logseq is translated to categories for use with Hugo.","title":"2024-01-20"},{"content":"How to deploy to this site: From Logseq, use schrodinger to export all public pages.\nUnzip the new archive and move the new \u0026lsquo;pages\u0026rsquo; folder into tealblu.github.io/content.\nMay also need to copy the \u0026lsquo;assets\u0026rsquo; folder from the /logseq/ directory to the /content/ directory. Inside tealblu.github.io, open a terminal and run hugo\nCreate a new commit and push to the remote graph.\nWait a few minutes for Github Actions to run.\nDone!\n{{embed [[deployment flow]]}}\n","permalink":"https://www.indi.bio/pages/deployment/","summary":"How to deploy to this site: From Logseq, use schrodinger to export all public pages.\nUnzip the new archive and move the new \u0026lsquo;pages\u0026rsquo; folder into tealblu.github.io/content.\nMay also need to copy the \u0026lsquo;assets\u0026rsquo; folder from the /logseq/ directory to the /content/ directory. Inside tealblu.github.io, open a terminal and run hugo\nCreate a new commit and push to the remote graph.\nWait a few minutes for Github Actions to run.","title":"Deployment"},{"content":"Current graph state: Structure Specification: Architecture The graph should consist of multiple hub-and-spoke structures.\nThe \u0026ldquo;hubs\u0026rdquo; in this system will be called root pages.\nThe \u0026ldquo;spokes\u0026rdquo; in this system will be called child pages.\nGuidelines Any block larger than one paragraph (subjective) should be its own page.\nAny page longer than two full screens should be split up.\nFull sentences should be used when possible.\nNo orphan pages should ever be pushed to production.\nAll root pages should have a category.\nNo child pages should have a category.\nGraph Development Process: What am I doing? I am figuring out how to structure this graph.\ngraph: a structured collection of data consisting of interlinked nodes\rI am defining a structure now so that it stays organized as it grows.\nJust a few simple rules can turn chaos into order.\rRules should be short and simple.\nRules should be easy to understand.\nWhy am I doing it? As stated above, so that the graph stays organized as it grows.\nThis graph is my public \u0026ldquo;knowledge garden\u0026rdquo;, so I would like it to be as accessible to others as possible.\nWhat are my rules? Any block larger than one paragraph (subjective) should be its own page.\nAny page longer than two full screens should be split up.\nFull sentences should be used when possible.\nNo orphan pages should ever be pushed to production.\nAll root pages should have a category.\nNo child pages should have a category.\n","permalink":"https://www.indi.bio/pages/graph-structure/","summary":"Current graph state: Structure Specification: Architecture The graph should consist of multiple hub-and-spoke structures.\nThe \u0026ldquo;hubs\u0026rdquo; in this system will be called root pages.\nThe \u0026ldquo;spokes\u0026rdquo; in this system will be called child pages.\nGuidelines Any block larger than one paragraph (subjective) should be its own page.\nAny page longer than two full screens should be split up.\nFull sentences should be used when possible.\nNo orphan pages should ever be pushed to production.","title":"Graph Structure"},{"content":"What kind of projects do I do? I\u0026rsquo;m interested in a lot of different stuff! This collection will hopefully become an archive of my various projects, both for my personal reference and to document for future employment purposes. The types of projects here will include:\nCode, programming, and related projects -\u0026gt; Code Projects\nDIY stuff\nMusic\nAnd potentially more\u0026hellip;\n","permalink":"https://www.indi.bio/pages/projects-homepage/","summary":"What kind of projects do I do? I\u0026rsquo;m interested in a lot of different stuff! This collection will hopefully become an archive of my various projects, both for my personal reference and to document for future employment purposes. The types of projects here will include:\nCode, programming, and related projects -\u0026gt; Code Projects\nDIY stuff\nMusic\nAnd potentially more\u0026hellip;","title":"Projects Homepage"},{"content":"Templates can be used to provide structure to an otherwise unstructured graph. They are relatively self-explanatory - by using a slash command (/template), I can choose which template I want and then paste it anywhere in the file that I have open.\nFor more information, check the official Logseq documentation. metadata template:: metadata template-including-parent:: false\ndate:: YYYY-MM-DD category:: keywords:: public:: true diary template:: diary template-including-parent:: false\n#Diaries \u0026lt;% today %\u0026gt; \u0026lt;% time %\u0026gt;: ","permalink":"https://www.indi.bio/pages/templates/","summary":"Templates can be used to provide structure to an otherwise unstructured graph. They are relatively self-explanatory - by using a slash command (/template), I can choose which template I want and then paste it anywhere in the file that I have open.\nFor more information, check the official Logseq documentation. metadata template:: metadata template-including-parent:: false\ndate:: YYYY-MM-DD category:: keywords:: public:: true diary template:: diary template-including-parent:: false\n#Diaries \u0026lt;% today %\u0026gt; \u0026lt;% time %\u0026gt;: ","title":"Templates"}]